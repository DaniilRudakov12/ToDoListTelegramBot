#–§–ê–ô–õ –° –†–£–ß–ö–ê–ú–ò
from datetime import datetime
from typing import Dict, Optional

from aiogram.filters.command import Command
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from reply_keyboards import main_kb, tasks_menu_kb, status_kb, cancel_kb

import database.requests as rq

router = Router()



#–†—É—á–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞
@router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(f'''–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–æ–π ToDoList!üëã
–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –≤–æ–∑–ª–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ.
/add - –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
/show - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è''', reply_markup=main_kb)


@router.message(F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π")
async def add_event_from_button(message: types.Message):
    await show_command(message)


class Addtask(StatesGroup):
    title = State()
    priority = State()
    deadline = State()

temp_tasks: Dict[int, Dict[str, Optional[str]]] = {}

@router.message(Command("add"))
async def add_command(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", reply_markup=cancel_kb)
    user_add = message.from_user.id
    await state.set_state(Addtask.title)
    temp_tasks[user_add] = {
        'user_id': user_add,
        'title': None,
        'priority': None,
        'deadline': None,
        'is_completed': "–ù–µ –Ω–∞—á–∞—Ç–æ‚ùå"
    }


@router.message(Addtask.title)
async def add_title(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        temp_tasks.pop(message.from_user.id, None)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ", reply_markup=main_kb)
        return
    temp_tasks[message.from_user.id]["title"] = message.text
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", reply_markup=cancel_kb)
    await state.set_state(Addtask.priority)


@router.message(Addtask.priority)
async def add_priority(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        temp_tasks.pop(message.from_user.id, None)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ", reply_markup=main_kb)
        return
    temp_tasks[message.from_user.id]["priority"] = message.text
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú", reply_markup=cancel_kb)
    await state.set_state(Addtask.deadline)

@router.message(Addtask.deadline)
async def add_deadline(message: types.Message, state: FSMContext):
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await state.clear()
            temp_tasks.pop(message.from_user.id, None)
            await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ", reply_markup=main_kb)
            return
        deadline = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        now = datetime.now()
        if deadline <= now:
            await message.answer(
                "–û—à–∏–±–∫–∞: –¥–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º.",
                reply_markup=cancel_kb)
            return
        temp_tasks[message.from_user.id]["deadline"] = deadline
        await state.clear()
        await rq.add_task(temp_tasks[message.from_user.id])
        await message.answer("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_kb)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú", reply_markup=cancel_kb)




@router.message(Command("show"))
@router.message(F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π")
async def show_command(message: types.Message):
    tasks = await rq.select_task(message.from_user.id)
    if not tasks:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–¥–∞—á!", reply_markup=tasks_menu_kb)
        return

    for task in tasks:
        kb = InlineKeyboardBuilder()
        kb.row(InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title:{task.id}"))
        kb.row(InlineKeyboardButton(text="üìå –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"edit_priority:{task.id}"))
        kb.row(InlineKeyboardButton(text="‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data=f"edit_deadline:{task.id}"))
        kb.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"edit_status:{task.id}"))
        kb.row(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_task:{task.id}"))

        await message.answer(
            f"üìå *{task.title}*\n"
            f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.priority}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M') if task.deadline else '‚Äî'}\n"
            f"–°—Ç–∞—Ç—É—Å: {task.is_completed}",
            parse_mode="Markdown",
            reply_markup=kb.as_markup()
        )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–Ω–∏–∑—É
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=tasks_menu_kb)


class EditTitle(StatesGroup):
    new_title = State()

@router.callback_query(F.data.startswith("edit_title:"))
async def callback_edit_title(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split(":")[1])
    await state.update_data(task_id=task_id, msg_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(EditTitle.new_title)

@router.message(EditTitle.new_title)
async def process_edit_title(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await rq.update_title(data["task_id"], message.text)
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    await show_command(message)
    await state.clear()

class EditPriority(StatesGroup):
    new_priority = State()

@router.callback_query(F.data.startswith("edit_priority:"))
async def callback_edit_priority(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split(":")[1])
    await state.update_data(task_id=task_id, msg_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(EditPriority.new_priority)

@router.message(EditPriority.new_priority)
async def process_edit_priority(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await rq.update_priority(data["task_id"], message.text)
    await message.answer("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω")
    await show_command(message)
    await state.clear()

class EditDeadline(StatesGroup):
    new_deadline = State()

@router.callback_query(F.data.startswith("edit_deadline:"))
async def callback_edit_deadline(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split(":")[1])
    await state.update_data(task_id=task_id, msg_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")
    await state.set_state(EditDeadline.new_deadline)

@router.message(EditDeadline.new_deadline)
async def process_edit_deadline(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        deadline = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        now = datetime.now()
        if deadline <= now:
            await message.answer(
                "–û—à–∏–±–∫–∞: –¥–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º.",
                reply_markup=cancel_kb)
            return
        await rq.update_deadline(data["task_id"], deadline)
        await message.answer("‚úÖ –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω")
        await show_command(message)
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

class EditStatus(StatesGroup):
    new_status = State()

@router.callback_query(F.data.startswith("edit_status:"))
async def callback_edit_status(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split(":")[1])
    await state.update_data(task_id=task_id, msg_id=callback.message.message_id, chat_id=callback.message.chat.id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:", reply_markup=status_kb)
    await state.set_state(EditStatus.new_status)

@router.message(EditStatus.new_status)
async def process_edit_status(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await rq.update_status(data["task_id"], message.text)
    await message.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω")
    await show_command(message)

    await state.clear()


@router.callback_query(F.data.startswith("delete_task:"))
async def callback_delete_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split(":")[1])
    await rq.delete_task(task_id)
    await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ", show_alert=False)
    await callback.message.delete()


@router.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def add_event_from_button(message: types.Message, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /add
    await add_command(message, state=state)



